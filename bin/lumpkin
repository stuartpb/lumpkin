#! /usr/bin/env node
const grarg = require('grarg');
const lumpkin = require('../index.js');
const readFileSync = require('fs').readFileSync;
const merge = require('lodash.merge');
const YAML = require('yaml');

const opts = require('envigor')();

for (let name of Object.keys(process.env)) {
  if (name.slice(0,8) == 'LUMPKIN_') {
    opts[name.slice(8).toLowerCase()] = process.env[name];
  }
}

// somewhat ugly hack for environment-variable-specified columns
if (opts.columns) opts.columns = YAML.parse(opts.columns);
// TODO: Shouldn't opts.secure be parsed for falsiness here, too?

function die(err) {
  console.error(err);
  process.exit(1);
}

grarg((arg, val) => {
  // KV arg handling
  if (arg && val) switch (arg) {

    // Config files
    case "use":
      merge(opts, YAML.parse(readFileSync(val,'utf8')));
      break;

    // Explicit YAML
    case "yaml":
    case "json":
      merge(opts, YAML.parse(val));
      break;

    // Special YAML values
    case "columns":
      opts.columns = YAML.parse(val);
      break;

    // Special file values
    case "html":
    case "text":
    case "recipients":
      opts[arg] = {path: val};
      break;

    // Special string values
    case "body":
      opts.text = val;
      break;

    // fail boolean args with values
    case "secure":
      die(`No context for ${JSON.stringify(val)}`);
      break;

    // Default KV args
    default:
      opts[arg] = val;
      break;

  // Normal boolean args
  } else if (arg == "secure") {
    opts[arg] = true;

  // Unrecognized args
  } else {
    if (arg) {
      die(`No value specified for ${JSON.stringify(arg)}`);

    // TODO: Use last "modal" argument as context for bare values
    } else {
      die(`No context for ${JSON.stringify(val)}`);
    }
  }
});

lumpkin(opts);
